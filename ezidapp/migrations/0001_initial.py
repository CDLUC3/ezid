# Generated by Django 3.2.8 on 2021-12-21 21:59

import datetime
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ezidapp.models.validation
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Datacenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=17, unique=True, validators=[ezidapp.models.validation.datacenterSymbol])),
                ('name', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.nonEmpty])),
            ],
            options={
                'verbose_name': 'datacenter',
                'verbose_name_plural': 'datacenters',
            },
        ),
        migrations.CreateModel(
            name='DownloadQueue',
            fields=[
                ('seq', models.AutoField(primary_key=True, serialize=False)),
                ('requestTime', models.IntegerField()),
                ('rawRequest', models.TextField()),
                ('requestor', models.CharField(max_length=255)),
                ('format', models.CharField(choices=[('A', 'ANVL'), ('C', 'CSV'), ('X', 'XML')], max_length=1)),
                ('compression', models.CharField(choices=[('G', 'GZIP'), ('Z', 'ZIP')], max_length=1)),
                ('columns', models.TextField(blank=True)),
                ('constraints', models.TextField(blank=True)),
                ('options', models.TextField(blank=True)),
                ('notify', models.TextField(blank=True)),
                ('stage', models.CharField(choices=[('C', 'create'), ('H', 'harvest'), ('Z', 'compress'), ('D', 'delete'), ('M', 'move'), ('N', 'notify')], default='C', max_length=1)),
                ('filename', models.CharField(blank=True, max_length=10)),
                ('toHarvest', models.TextField()),
                ('currentIndex', models.IntegerField(default=0)),
                ('lastId', models.CharField(blank=True, max_length=255)),
                ('fileSize', models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.agentPidOrEmpty])),
                ('groupname', models.CharField(max_length=32, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+([-_.][a-z0-9]+)*$', 'Invalid groupname.', flags=re.RegexFlag['IGNORECASE'])])),
                ('organizationName', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='name')),
                ('organizationAcronym', models.CharField(blank=True, max_length=255, verbose_name='acronym')),
                ('organizationUrl', models.URLField(max_length=255, verbose_name='URL')),
                ('organizationStreetAddress', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='street address')),
                ('accountType', models.CharField(blank=True, choices=[('B', 'Associate/bachelors-granting'), ('C', 'Corporate'), ('G', 'Group'), ('I', 'Institution'), ('M', 'Masters-granting'), ('N', 'Non-paying'), ('S', 'Service')], max_length=1, verbose_name='account type')),
                ('agreementOnFile', models.BooleanField(default=False, verbose_name='agreement on file')),
                ('crossrefEnabled', models.BooleanField(default=False, verbose_name='Crossref enabled')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
        ),
        migrations.CreateModel(
            name='NewAccountWorksheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requestDate', models.DateField(default=datetime.date.today, verbose_name='request date')),
                ('orgName', models.CharField(help_text='Ex: The Digital Archaeological Record', max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='name')),
                ('orgAcronym', models.CharField(blank=True, help_text='Ex: tDAR', max_length=255, verbose_name='acronym')),
                ('orgUrl', models.URLField(blank=True, max_length=255, verbose_name='URL')),
                ('orgStreetAddress', models.CharField(blank=True, max_length=255, verbose_name='street address')),
                ('reqName', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('reqEmail', models.EmailField(blank=True, max_length=255, verbose_name='email')),
                ('reqPhone', models.CharField(blank=True, max_length=255, verbose_name='phone')),
                ('priName', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('priEmail', models.EmailField(blank=True, max_length=255, verbose_name='email')),
                ('priPhone', models.CharField(blank=True, max_length=255, verbose_name='phone')),
                ('secName', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('secEmail', models.EmailField(blank=True, max_length=255, verbose_name='email')),
                ('secPhone', models.CharField(blank=True, max_length=255, verbose_name='phone')),
                ('accountEmail', models.EmailField(blank=True, help_text="Defaults to the primary contact's email.", max_length=255, verbose_name='account email')),
                ('reqArks', models.BooleanField(default=False, verbose_name='ARKs')),
                ('reqDois', models.BooleanField(default=False, verbose_name='DOIs')),
                ('reqCrossref', models.BooleanField(default=False, verbose_name='Crossref')),
                ('reqCrossrefEmail', models.EmailField(blank=True, max_length=255, verbose_name='Crossref email')),
                ('reqComments', models.TextField(blank=True, verbose_name='requestor comments')),
                ('setRealm', models.CharField(blank=True, max_length=255, verbose_name='realm')),
                ('setGroupname', models.CharField(blank=True, max_length=255, verbose_name='groupname')),
                ('setUsername', models.CharField(blank=True, max_length=255, verbose_name='username')),
                ('setUserDisplayName', models.CharField(blank=True, help_text='Defaults to the organization name.', max_length=255, verbose_name='user display name')),
                ('setShoulderDisplayName', models.CharField(blank=True, help_text='Defaults to the organization name.', max_length=255, verbose_name='shoulder display name')),
                ('setNonDefaultSetup', models.BooleanField(default=False, verbose_name='non-default setup')),
                ('setNotes', models.TextField(blank=True, verbose_name='notes')),
                ('staReady', models.BooleanField(default=False, verbose_name='request ready')),
                ('staShouldersCreated', models.BooleanField(default=False, verbose_name='shoulders created')),
                ('staAccountCreated', models.BooleanField(default=False, verbose_name='account created')),
            ],
        ),
        migrations.CreateModel(
            name='NewsFeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_id', models.CharField(max_length=255, unique=True)),
                ('published', models.DateTimeField()),
                ('title', models.TextField()),
                ('link', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=32, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+([-_.][a-z0-9]+)*$', 'Invalid profile name.', flags=re.RegexFlag['IGNORECASE'])])),
            ],
        ),
        migrations.CreateModel(
            name='Realm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, validators=[ezidapp.models.validation.nonEmpty])),
            ],
            options={
                'verbose_name': 'realm',
                'verbose_name_plural': 'realms',
            },
        ),
        migrations.CreateModel(
            name='RefIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('updateTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('R', 'reserved'), ('P', 'public'), ('U', 'unavailable')], default='P', max_length=1)),
                ('unavailableReason', models.TextField(blank=True, default='')),
                ('exported', models.BooleanField(default=True)),
                ('crossrefStatus', models.CharField(blank=True, choices=[('R', 'awaiting status change to public'), ('B', 'registration in progress'), ('S', 'successfully registered'), ('W', 'registered with warning'), ('F', 'registration failure')], default='', max_length=1)),
                ('crossrefMessage', models.TextField(blank=True, default='')),
                ('target', models.URLField(blank=True, default='', max_length=2000, validators=[ezidapp.models.validation.unicodeBmpOnly])),
                ('cm', models.BinaryField(default=dict)),
                ('metadata', models.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('agentRole', models.CharField(blank=True, choices=[('U', 'user'), ('G', 'group')], default='', max_length=1)),
                ('isTest', models.BooleanField(blank=True, editable=False)),
                ('identifier', models.CharField(max_length=255, validators=[ezidapp.models.validation.anyIdentifier])),
                ('datacenter', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.datacenter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegistrationAgency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_agency', models.CharField(editable=False, max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Shoulder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.shoulder])),
                ('type', models.CharField(editable=False, max_length=32)),
                ('name', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty])),
                ('minter', models.URLField(blank=True, max_length=255)),
                ('crossrefEnabled', models.BooleanField(default=False, verbose_name='Crossref enabled')),
                ('isTest', models.BooleanField(editable=False)),
                ('prefix_shares_datacenter', models.BooleanField(default=False, editable=False)),
                ('manager', models.CharField(blank=True, editable=False, max_length=32, null=True)),
                ('active', models.BooleanField(default=False, editable=False)),
                ('redirect', models.URLField(blank=True, editable=False, max_length=255, null=True)),
                ('date', models.DateField(blank=True, editable=False, null=True)),
                ('isSupershoulder', models.BooleanField(default=False, editable=False)),
                ('datacenter', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.datacenter')),
                ('registration_agency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.registrationagency')),
            ],
        ),
        migrations.CreateModel(
            name='ShoulderType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shoulder_type', models.CharField(editable=False, max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.agentPid])),
                ('username', models.CharField(max_length=32, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+([-_.][a-z0-9]+)*$', 'Invalid username.', flags=re.RegexFlag['IGNORECASE'])])),
                ('displayName', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='display name')),
                ('accountEmail', models.EmailField(help_text='The email address to which account-related notifications are sent other than Crossref notifications.', max_length=255, verbose_name='account email')),
                ('primaryContactName', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='name')),
                ('primaryContactEmail', models.EmailField(max_length=255, verbose_name='email')),
                ('primaryContactPhone', models.CharField(max_length=255, validators=[ezidapp.models.validation.nonEmpty], verbose_name='phone')),
                ('secondaryContactName', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('secondaryContactEmail', models.EmailField(blank=True, max_length=255, verbose_name='email')),
                ('secondaryContactPhone', models.CharField(blank=True, max_length=255, verbose_name='phone')),
                ('inheritGroupShoulders', models.BooleanField(default=False, help_text='If checked, the user has access to all group shoulders; if not checked, the user has access only to the shoulders explicitly selected below.', verbose_name='inherit group shoulders')),
                ('crossrefEnabled', models.BooleanField(default=False, verbose_name='Crossref enabled')),
                ('crossrefEmail', models.EmailField(blank=True, max_length=255, verbose_name='Crossref email')),
                ('isGroupAdministrator', models.BooleanField(default=False, verbose_name='group administrator')),
                ('isRealmAdministrator', models.BooleanField(default=False, verbose_name='realm administrator')),
                ('isSuperuser', models.BooleanField(default=False, verbose_name='superuser')),
                ('loginEnabled', models.BooleanField(default=True, verbose_name='login enabled')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='set password')),
                ('notes', models.TextField(blank=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.group')),
                ('proxies', models.ManyToManyField(blank=True, help_text='A proxy is another user that may act on behalf of this user.', to='ezidapp.User')),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.realm')),
                ('shoulders', models.ManyToManyField(blank=True, to='ezidapp.Shoulder')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.CharField(db_index=True, max_length=7)),
                ('owner', models.CharField(max_length=255, validators=[ezidapp.models.validation.agentPid])),
                ('ownergroup', models.CharField(max_length=255, validators=[ezidapp.models.validation.agentPid])),
                ('realm', models.CharField(max_length=32)),
                ('type', models.CharField(max_length=32)),
                ('hasMetadata', models.BooleanField()),
                ('count', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'unique_together': {('month', 'owner', 'type', 'hasMetadata')},
            },
        ),
        migrations.AddField(
            model_name='shoulder',
            name='shoulder_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.shouldertype'),
        ),
        migrations.CreateModel(
            name='SearchIndexerQueue',
            fields=[
                ('seq', models.AutoField(primary_key=True, serialize=False)),
                ('enqueueTime', models.IntegerField()),
                ('submitTime', models.IntegerField(blank=True, null=True)),
                ('operation', models.CharField(choices=[('C', 'create'), ('U', 'update'), ('D', 'delete')], db_index=True, max_length=1)),
                ('status', models.CharField(choices=[('U', 'Awaiting submission'), ('S', 'Submitted'), ('W', 'Registered with warning'), ('F', 'Registration failed')], db_index=True, default='U', max_length=1)),
                ('message', models.TextField(blank=True)),
                ('batchId', models.CharField(blank=True, max_length=36)),
                ('error', models.TextField(blank=True)),
                ('errorIsPermanent', models.BooleanField(default=False)),
                ('refIdentifier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.refidentifier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='refidentifier',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.user'),
        ),
        migrations.AddField(
            model_name='refidentifier',
            name='ownergroup',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.group'),
        ),
        migrations.AddField(
            model_name='refidentifier',
            name='profile',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.profile'),
        ),
        migrations.CreateModel(
            name='LinkChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('owner_id', models.IntegerField(db_index=True)),
                ('target', models.URLField(max_length=255)),
                ('lastCheckTime', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('numFailures', models.IntegerField(db_index=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('isBad', models.BooleanField(default=False, editable=False)),
                ('returnCode', models.IntegerField(blank=True, null=True)),
                ('error', models.TextField(blank=True)),
                ('mimeType', models.CharField(blank=True, max_length=255)),
                ('size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('hash', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'index_together': {('owner_id', 'isBad', 'lastCheckTime')},
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.anyIdentifier])),
                ('createTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('updateTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('R', 'reserved'), ('P', 'public'), ('U', 'unavailable')], default='P', max_length=1)),
                ('unavailableReason', models.TextField(blank=True, default='')),
                ('exported', models.BooleanField(default=True)),
                ('crossrefStatus', models.CharField(blank=True, choices=[('R', 'awaiting status change to public'), ('B', 'registration in progress'), ('S', 'successfully registered'), ('W', 'registered with warning'), ('F', 'registration failure')], default='', max_length=1)),
                ('crossrefMessage', models.TextField(blank=True, default='')),
                ('target', models.URLField(blank=True, default='', max_length=2000, validators=[ezidapp.models.validation.unicodeBmpOnly])),
                ('cm', models.BinaryField(default=dict)),
                ('metadata', models.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('agentRole', models.CharField(blank=True, choices=[('U', 'user'), ('G', 'group')], default='', max_length=1)),
                ('isTest', models.BooleanField(blank=True, editable=False)),
                ('datacenter', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.datacenter')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.user')),
                ('ownergroup', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.group')),
                ('profile', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='group',
            name='realm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.realm'),
        ),
        migrations.AddField(
            model_name='group',
            name='shoulders',
            field=models.ManyToManyField(blank=True, to='ezidapp.Shoulder'),
        ),
        migrations.CreateModel(
            name='DataciteQueue',
            fields=[
                ('seq', models.AutoField(primary_key=True, serialize=False)),
                ('enqueueTime', models.IntegerField()),
                ('submitTime', models.IntegerField(blank=True, null=True)),
                ('operation', models.CharField(choices=[('C', 'create'), ('U', 'update'), ('D', 'delete')], db_index=True, max_length=1)),
                ('status', models.CharField(choices=[('U', 'Awaiting submission'), ('S', 'Submitted'), ('W', 'Registered with warning'), ('F', 'Registration failed')], db_index=True, default='U', max_length=1)),
                ('message', models.TextField(blank=True)),
                ('batchId', models.CharField(blank=True, max_length=36)),
                ('error', models.TextField(blank=True)),
                ('errorIsPermanent', models.BooleanField(default=False)),
                ('refIdentifier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.refidentifier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CrossrefQueue',
            fields=[
                ('seq', models.AutoField(primary_key=True, serialize=False)),
                ('enqueueTime', models.IntegerField()),
                ('submitTime', models.IntegerField(blank=True, null=True)),
                ('operation', models.CharField(choices=[('C', 'create'), ('U', 'update'), ('D', 'delete')], db_index=True, max_length=1)),
                ('status', models.CharField(choices=[('U', 'Awaiting submission'), ('S', 'Submitted'), ('W', 'Registered with warning'), ('F', 'Registration failed')], db_index=True, default='U', max_length=1)),
                ('message', models.TextField(blank=True)),
                ('batchId', models.CharField(blank=True, max_length=36)),
                ('error', models.TextField(blank=True)),
                ('errorIsPermanent', models.BooleanField(default=False)),
                ('refIdentifier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.refidentifier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BinderQueue',
            fields=[
                ('seq', models.AutoField(primary_key=True, serialize=False)),
                ('enqueueTime', models.IntegerField()),
                ('submitTime', models.IntegerField(blank=True, null=True)),
                ('operation', models.CharField(choices=[('C', 'create'), ('U', 'update'), ('D', 'delete')], db_index=True, max_length=1)),
                ('status', models.CharField(choices=[('U', 'Awaiting submission'), ('S', 'Submitted'), ('W', 'Registered with warning'), ('F', 'Registration failed')], db_index=True, default='U', max_length=1)),
                ('message', models.TextField(blank=True)),
                ('batchId', models.CharField(blank=True, max_length=36)),
                ('error', models.TextField(blank=True)),
                ('errorIsPermanent', models.BooleanField(default=False)),
                ('refIdentifier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.refidentifier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='shoulder',
            unique_together={('name', 'type')},
        ),
        migrations.CreateModel(
            name='SearchIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255, unique=True, validators=[ezidapp.models.validation.anyIdentifier])),
                ('createTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('updateTime', models.IntegerField(blank=True, default='', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('R', 'reserved'), ('P', 'public'), ('U', 'unavailable')], default='P', max_length=1)),
                ('unavailableReason', models.TextField(blank=True, default='')),
                ('exported', models.BooleanField(default=True)),
                ('crossrefStatus', models.CharField(blank=True, choices=[('R', 'awaiting status change to public'), ('B', 'registration in progress'), ('S', 'successfully registered'), ('W', 'registered with warning'), ('F', 'registration failure')], default='', max_length=1)),
                ('crossrefMessage', models.TextField(blank=True, default='')),
                ('target', models.URLField(blank=True, default='', max_length=2000, validators=[ezidapp.models.validation.unicodeBmpOnly])),
                ('cm', models.BinaryField(default=dict)),
                ('metadata', models.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('agentRole', models.CharField(blank=True, choices=[('U', 'user'), ('G', 'group')], default='', max_length=1)),
                ('isTest', models.BooleanField(blank=True, editable=False)),
                ('searchableTarget', models.CharField(editable=False, max_length=255)),
                ('resourceCreator', models.TextField(editable=False)),
                ('resourceTitle', models.TextField(editable=False)),
                ('resourcePublisher', models.TextField(editable=False)),
                ('resourcePublicationDate', models.TextField(editable=False)),
                ('searchablePublicationYear', models.IntegerField(blank=True, editable=False, null=True)),
                ('resourceType', models.TextField(editable=False)),
                ('searchableResourceType', models.CharField(choices=[('A', 'Audiovisual'), ('C', 'Collection'), ('D', 'Dataset'), ('E', 'Event'), ('Im', 'Image'), ('In', 'InteractiveResource'), ('M', 'Model'), ('Z', 'Other'), ('P', 'PhysicalObject'), ('Se', 'Service'), ('So', 'Software'), ('Su', 'Sound'), ('T', 'Text'), ('W', 'Workflow')], editable=False, max_length=2)),
                ('keywords', models.TextField(editable=False)),
                ('resourceCreatorPrefix', models.CharField(editable=False, max_length=50)),
                ('resourceTitlePrefix', models.CharField(editable=False, max_length=50)),
                ('resourcePublisherPrefix', models.CharField(editable=False, max_length=50)),
                ('hasMetadata', models.BooleanField(editable=False)),
                ('publicSearchVisible', models.BooleanField(editable=False)),
                ('oaiVisible', models.BooleanField(editable=False)),
                ('linkIsBroken', models.BooleanField(default=False, editable=False)),
                ('hasIssues', models.BooleanField(editable=False)),
                ('datacenter', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.datacenter')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ezidapp.user')),
                ('ownergroup', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.group')),
                ('profile', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='ezidapp.profile')),
            ],
            options={
                'index_together': {('publicSearchVisible', 'searchableResourceType'), ('publicSearchVisible', 'searchablePublicationYear'), ('publicSearchVisible', 'resourceTitlePrefix'), ('publicSearchVisible', 'resourceCreatorPrefix'), ('publicSearchVisible', 'resourcePublisherPrefix'), ('searchableTarget',)},
            },
        ),
    ]
