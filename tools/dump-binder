#! /usr/bin/env python

# Dumps a noid "egg" binder database to standard output.
#
# Usage: dump-binder [-rz] egg.bdb
#
# Options:
#   -r raw dump
#   -z gzip the output
#
# Note: identifiers are NOT written in lexicographic order.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# December 2011

import bsddb.db
import gzip
import optparse
import os.path
import sys

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import noid_egg
import util
import util2

p = optparse.OptionParser(usage="%prog [-rz] egg.bdb")
p.add_option("-r", action="store_true", dest="rawOutput",
  default=False, help="raw dump")
p.add_option("-z", action="store_true",
  dest="gzipOutput", default=False, help="gzip output")
options, args = p.parse_args()
if len(args) != 1: p.error("wrong number of arguments")

if options.gzipOutput:
  outfile = gzip.GzipFile(fileobj=sys.stdout, mode="w")
else:
  outfile = sys.stdout

def outputRecord (identifier, record):
  try:
    for k in ["_o", "_g", "_c", "_u", "_t", "_p"]:
      assert k in record, "missing field: " + k
    if not options.rawOutput: util2.convertLegacyToExternal(record)
    outfile.write(util.toExchange(record, identifier))
    outfile.write("\n")
  except Exception, e:
    sys.stderr.write("\nInvalid record: %s\n%s\nRecord: %s\n" % (identifier,
      util.formatException(e), repr(record)))

db = bsddb.db.DB()
db.open(args[0], flags=bsddb.db.DB_RDONLY)
cursor = db.cursor()
entry = cursor.first()
lastId = None
while entry != None:
  k, value = entry
  if "|" in k:
    id, label = k.split("|", 1)
    id = noid_egg.decodeRaw(id)
    label = noid_egg.decodeRaw(label)
    value = value.decode("UTF-8")
    if util.validateIdentifier(id) == id and\
      not label.startswith("__") and not label.startswith("_.e") and\
      not label.startswith("_,e"):
      # The fundamental assumption of this loop is that bindings
      # (binding = identifier + "|" + label) are stored in
      # lexicographic order.  But that doesn't imply that identifiers
      # themselves are returned in lexicographic order.
      if id != lastId:
        if lastId is not None: outputRecord(lastId, record)
        record = {}
      record[label] = value
      lastId = id
  entry = cursor.next()
if lastId is not None: outputRecord(lastId, record)
db.close()

outfile.close()
