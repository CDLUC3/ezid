#! /usr/bin/python

# Expunges expired test identifiers from a noid bind database.  Usage:
#
#   expunge dbpath noidurl
#     dbpath: noid database pathname (.bdb)
#     noidurl: noid service URL corresponding to database
#
#   expunge dbpath -p [azbocrtke]
#     print/debug mode; argument is one or more flags:
#     a: print all entries (a=z+b)
#     z: print all non-identifier entries
#     b: print all identifier bindings (b=o+c)
#     o: print bindings other than _c
#     c: print _c bindings (c=r+t)
#     r: print _c bindings of real (non-test) identifiers
#     t: print _c bindings of test identifiers (t=k+e)
#     k: print _c bindings of test identifiers to be kept
#     e: print _c bindings of expired test identifiers
#
# Note that this script requires several EZID modules.  The
# DJANGO_SETTINGS_MODULE environment variable must be set
# appropriately (e.g., to "settings.production") and the PYTHONPATH
# environment variable must be set to the .../SITE_ROOT/PROJECT_ROOT
# directory.
#
# Greg Janee <gjanee@ucop.edu>
# April 2011

import bsddb.db
import re
import sys
import time
import urllib

# Bootstrapping: reference a(ny) Django setting to trigger the loading
# of said settings, which causes the PYTHONPATH to be modified,
# supporting subsequent imports.
import django.conf
django.conf.settings.PROJECT_ROOT

import config
import datacite
import noid
import util

testArkPrefix = config.config("prefix_TESTARK.prefix")[5:]
testDoiPrefix = util.doi2shadow(config.config("prefix_TESTDOI.prefix")[4:])
lifetime = 72*60*60 # seconds
ezidUrl = config.config("DEFAULT.ezid_base_url")

usageText = """Usage:

  expunge dbpath noidurl
    dbpath: noid database pathname (.bdb)
    noidurl: noid service URL corresponding to database

  expunge dbpath -p [azbocrtke]
    print/debug mode; argument is one or more flags:
    a: print all entries (a=z+b)
    z: print all non-identifier entries
    b: print all identifier bindings (b=o+c)
    o: print bindings other than _c
    c: print _c bindings (c=r+t)
    r: print _c bindings of real (non-test) identifiers
    t: print _c bindings of test identifiers (t=k+e)
    k: print _c bindings of test identifiers to be kept
    e: print _c bindings of expired test identifiers
"""

if len(sys.argv) == 3 and sys.argv[2].startswith("http://"):
  dbPath = sys.argv[1]
  bindNoid = noid.Noid(sys.argv[2])
  debug = ""
elif len(sys.argv) == 4 and sys.argv[2] == "-p" and\
  re.match("[azbocrtke]+$", sys.argv[3]):
  dbPath = sys.argv[1]
  debug = sys.argv[3]
  for f, ff in [("a", "zb"), ("b", "oc"), ("c", "rt"), ("t", "ke")]:
    if f in debug: debug += ff
else:
  sys.stderr.write(usageText)
  sys.exit(1)

def output (flag, k, v):
  if flag in debug: print k, "->", v

db = bsddb.db.DB()
db.open(dbPath, flags=bsddb.db.DB_RDONLY)
cursor = db.cursor()

expungeList = []
shadowedIds = {}

entry = cursor.first()
while entry != None:
  k, v = entry
  if "\t" not in k:
    output("z", k, v)
  else:
    id, label = k.split("\t", 1)
    if util.validateArk(id) != id:
      output("z", k, v)
    elif label != "_c" or not re.match("[0-9]+$", v):
      if label == "_s": shadowedIds[id] = util.decode(v)
      output("o", k, v)
    elif not id.startswith(testArkPrefix) and not id.startswith(testDoiPrefix):
      output("r", k, v)
    else:
      creationTime = int(v)
      if int(time.time())-creationTime < lifetime:
        output("k", k, v)
      else:
        output("e", k, v)
        expungeList.append(id)
  entry = cursor.next()

db.close()

if debug == "":
  for id in expungeList:
    try:
      # We can't actually delete a DOI.  As the next best thing, we
      # set its target URL to point back at EZID, which will return
      # "no such identifier" after we've deleted the identifier from
      # the bind database.
      if id.startswith(testDoiPrefix):
        doi = shadowedIds[id]
        assert doi.startswith("doi:")
        datacite.setTargetUrl(doi[4:],
          "%s/id/%s" % (ezidUrl, urllib.quote(doi, ":/")))
      bindNoid.deleteElements(id)
      bindNoid.releaseIdentifier(id)
    except Exception, e:
      sys.stderr.write("expunge: processing %s\n" % id)
      raise
