#! /usr/bin/env python

# Expunges expired test identifiers.  Such identifiers are discovered
# by querying the database directly, but expunged by requesting that
# the (live) EZID server delete them.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# April 2011

import os.path
import sys
import time
import urllib
import urllib2

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import config
import ezidapp.models

expireTime = int(time.time()) - 14*86400
baseUrl = config.get("DEFAULT.ezid_base_url")
adminPassword = config.get("auth.admin_password")

if len(sys.argv) != 1:
  sys.stderr.write("Usage: expunge\n")
  sys.exit(1)

expungeList = []
for prefix in [ezidapp.models.getArkTestShoulder().prefix,
  ezidapp.models.getDoiTestShoulder().prefix,
  ezidapp.models.getCrossrefTestShoulder().prefix]:
  expungeList.extend([si.identifier for si in\
    ezidapp.models.StoreIdentifier.objects.filter(
    identifier__startswith=prefix).filter(createTime__lte=expireTime).\
    only("identifier")])

django.db.connections["default"].close()

opener = urllib2.build_opener()
h = urllib2.HTTPBasicAuthHandler()
h.add_password("EZID", baseUrl, "admin", adminPassword)
opener.add_handler(h)

def deleteIdentifier (identifier):
  # Though we read identifiers directly from the EZID database, to
  # avoid conflicts with the corresponding running system we don't
  # delete identifiers directly, but ask the system to do so.
  r = urllib2.Request("%s/id/%s" % (baseUrl, urllib.quote(identifier, ":/")))
  r.get_method = lambda: "DELETE"
  c = None
  try:
    c = opener.open(r)
    s = c.read()
    assert s.startswith("success:"), "unexpected response received: " + s
  except urllib2.HTTPError, e:
    if e.fp != None:
      try:
        m = e.fp.read()
      except Exception:
        pass
      else:
        if not e.msg.endswith("\n"): e.msg += "\n"
        e.msg += m
    raise e
  finally:
    if c: c.close()

for identifier in expungeList:
  try:
    deleteIdentifier(identifier)
  except:
    sys.stderr.write("expunge: processing %s\n" % identifier)
    raise
