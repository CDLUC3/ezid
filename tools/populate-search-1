#! /usr/bin/env python

# Performs the first of three steps in populating the search database
# from a raw dump file.  This script populates groups and users.
# Given dump file DUMP, the usage is:
#
#    PR=.../SITE_ROOT/PROJECT_ROOT
#
#    $PR/tools/select _fields contains _ezid_role < DUMP |\
#      $PR/tools/project _id _ezid_role ldap.gid ldap.groupArkId ldap.uid\
#      ldap.arkId ldap.ezidOwnerGroup | $PR/tools/populate-search-1
#
# The database populated is determined by the settings in common.py.
#
# Note that realms are not currently handled; instead, every group is
# assigned to the one realm that is assumed to already exist in the
# search database.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# November 2015

import django.db.utils
import ldap.dn
import os.path
import sys

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import config
import ezidapp.models
import util

groupDnTemplate = config.get("ldap.group_dn_template")

# The one and only realm...
realm = ezidapp.models.SearchRealm.objects.all()[0]

groups = {}
users = []

for line in sys.stdin:
  tokens = line[:-1].split(" ")
  pid = "ark:/" + tokens[0]
  role, groupname, groupPid, username, userPid, groupDn =\
    [util.decode(t) for t in tokens[1:]]
  if role == "group":
    assert groupPid == pid, "group PID mismatch"
    dn = groupDnTemplate % ldap.dn.escape_dn_chars(groupname)
    assert dn not in groups, "duplicate group DN"
    groups[dn] = (pid, groupname)
  elif role == "user":
    assert userPid == pid, "user PID mismatch"
    users.append((pid, username, groupDn))
  else:
    assert False, "unhandled case"

for groupDn in groups.keys():
  pid, groupname = groups[groupDn]
  g = ezidapp.models.SearchGroup(pid=pid, groupname=groupname, realm=realm)
  g.full_clean(validate_unique=False)
  try:
    g.save()
  except django.db.utils.IntegrityError:
    # An existing group is OK as long as it matches.
    g = ezidapp.models.SearchGroup.objects.get(pid=pid)
    assert g.groupname == groupname, "mismatch with existing group"
  groups[groupDn] = g

for pid, username, groupDn in users:
  assert groupDn in groups, "user without group"
  u = ezidapp.models.SearchUser(pid=pid, username=username,
    group=groups[groupDn], realm=realm)
  u.full_clean(validate_unique=False)
  try:
    u.save()
  except django.db.utils.IntegrityError:
    # An existing user is OK as long as it matches.
    u = ezidapp.models.SearchUser.objects.get(pid=pid)
    assert u.username == username and u.group == groups[groupDn],\
      "mismatch with existing user"
