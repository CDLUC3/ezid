#! /usr/bin/env python

# DataCite Metadata Store (MDS) administration tool.  Currently
# supports creating and viewing datacenters only.  Run with no
# arguments for usage.
#
# Caution: creating and updating a datacenter are the same operation.
# If it is creation that is really desired, check first that the
# datacenter does not already exist.
#
# Greg Janee <gjanee@ucop.edu>
# September 2012

import lxml.etree
import re
import sys
import urllib2

URL = "https://mds.datacite.org/datacentre"
ALLOCATOR = "CDL"
CONTACT_NAME = "Greg Janee"
CONTACT_EMAIL = "gjanee@ucop.edu"

class MyHTTPErrorProcessor (urllib2.HTTPErrorProcessor):
  def http_response (self, request, response):
    # Bizarre that Python leaves this out.
    if response.code == 201:
      return response
    else:
      return urllib2.HTTPErrorProcessor.http_response(self, request, response)
  https_response = http_response

# Defined here, but set below.
opener = None

usageText = """Usage: mdsadmin password operation...

  operation:
    c[reate] symbol prefixes...
    v[iew] symbol

  operation examples:
    create FOO 10.1234 10.5678
    view FOO
"""

def usageError ():
  sys.stderr.write(usageText)
  sys.exit(1)

def validateSymbol (symbol):
  if re.match("[A-Z][-A-Z0-9]{0,6}[A-Z0-9]$", symbol, re.I):
    return symbol.upper()
  else:
    sys.stderr.write("mdsadmin: invalid datacenter symbol\n")
    sys.exit(1)

def validatePrefix (prefix):
  if re.match("10\.\d\d\d\d$", prefix):
    return prefix
  else:
    sys.stderr.write("mdsadmin: invalid prefix\n")
    sys.exit(1)

def nodeText (node):
  if node.text is not None:
    return node.text.strip()
  else:
    return ""

def xpathText (node, path, separator=""):
  return separator.join(nodeText(n) for n in node.xpath(path))

def formatDatacenter (record):
  root = lxml.etree.XML(record)
  o = []
  def format (label, path, separator=""):
    o.append("%s: %s" % (label, xpathText(root, path, separator)))
  format("symbol", "symbol")
  format("name" ,"name")
  format("contact name", "contactName")
  format("contact email", "contactEmail")
  format("DOI quota allowed", "doiQuotaAllowed")
  format("DOI quota used", "doiQuotaUsed")
  format("is active", "isActive")
  format("domains", "domains")
  format("comments", "comments")
  format("prefixes", "prefixes/prefix", ", ")
  format("updated", "updated")
  format("created", "created")
  return "\n".join(o)

def viewDatacenter (symbol):
  try:
    c = opener.open(urllib2.Request("%s?symbol=%s.%s" % (URL, ALLOCATOR,
      symbol)))
    record = c.read()
    c.close()
  except urllib2.HTTPError, e:
    sys.stderr.write("%d %s\n%s\n" % (e.code, e.msg, e.fp.read()))
    sys.exit(1)
  print formatDatacenter(record),

createTemplate = """<?xml version="1.0"?>
<datacentre>
  <contactEmail>%s</contactEmail>
  <contactName>%s</contactName>
  <doiQuotaAllowed>-1</doiQuotaAllowed>
  <domains>*</domains>
  <isActive>true</isActive>
  <name>%%s</name>
%%s  <symbol>%s.%%s</symbol>
</datacentre>
""" % (CONTACT_EMAIL, CONTACT_NAME, ALLOCATOR)

def createDatacenter (symbol, prefixes):
  request = urllib2.Request(URL)
  request.add_header("Content-Type", "application/xml; charset=UTF-8")
  request.add_data(createTemplate % (symbol,
    "".join("  <prefixes><prefix>%s</prefix></prefixes>\n" % p\
    for p in prefixes), symbol))
  request.get_method = lambda: "PUT"
  try:
    c = opener.open(request)
    record = c.read()
    c.close()
  except urllib2.HTTPError, e:
    sys.stderr.write("%d %s\n%s\n" % (e.code, e.msg, e.fp.read()))
    sys.exit(1)
  print "Create/update successful, datacenter record follows..."
  print
  print formatDatacenter(record),

if len(sys.argv) < 3: usageError()

opener = urllib2.build_opener(MyHTTPErrorProcessor())
h = urllib2.HTTPBasicAuthHandler()
h.add_password("mds.datacite.org", URL, ALLOCATOR, sys.argv[1])
opener.add_handler(h)

operation = filter(lambda o: o.startswith(sys.argv[2]), ["create", "view"])
if len(operation) != 1: usageError()

if operation[0] == "view":
  if len(sys.argv) != 4: usageError()
  viewDatacenter(validateSymbol(sys.argv[3]))
elif operation[0] == "create":
  if len(sys.argv) < 5: usageError()
  createDatacenter(validateSymbol(sys.argv[3]),
    [validatePrefix(p) for p in sys.argv[4:]])
else:
  usageError()
