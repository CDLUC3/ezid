#! /usr/bin/env python

# Deletes a user, and optionally the user's identifiers as well.
#
# This script modifies the database external to the running server and
# does not, for example, participate in the server's identifier
# locking mechanism.  While this script goes to some pains to ensure
# that the deletion can be performed safely and that there will be no
# conflicts with the server, it does not guarantee that, and hence
# should be run with caution.  Note that identifier deletions are
# logged to standard error and not to the server's log.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# June 2018

import argparse
import os.path
import sys
import time

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import ezid
import ezidapp.models

STEPS = [
  "1) Disable the user's login and remove its shoulders.",
  "2) Delete the user (this script, step=2).",
  "3) Reload the server."]

DELETE_REQUIREMENTS = """For a user to be deleted, the user must:

   - Be disabled from logging in
   - Not inherit its group's shoulders
   - Have no shoulders
   - Not have any proxies or be a proxy for another user"""

def error (message):
  sys.stderr.write("delete-user: %s\n" % message)
  sys.exit(1)

p = argparse.ArgumentParser(
  description=("Deleting a user requires 3 steps:\n\n" + "\n".join(STEPS)),
  formatter_class=argparse.RawDescriptionHelpFormatter)
p.add_argument("user", help="the user to delete")
p.add_argument("-i", action="store_true", dest="deleteIdentifiers",
  help="also delete the user's identifiers")
p.add_argument("-l", action="store_false", dest="updateExternalServices",
  help="disable external service updates")
p.add_argument("step", type=int, choices=[2], nargs="?",
  help="processing step")

args = p.parse_args(sys.argv[1:])

user = ezidapp.models.getUserByUsername(args.user)
if user == None or args.user == "anonymous":
  error("no such user: " + args.user)

if user.loginEnabled or user.inheritGroupShoulders or\
  user.shoulders.count() > 0 or user.proxies.count() > 0 or\
  user.proxy_for.count() > 0:
  error("user can't be deleted\n\n%s\n" % DELETE_REQUIREMENTS)

if args.step != 2:
  p.error("run with -h for usage")

def hasIdentifiersInUpdateQueue ():
  for r in ezidapp.models.UpdateQueue.objects.all().order_by("seq"):
    if r.actualObject.owner == user: return True
  return False

if args.deleteIdentifiers:
  lastId = ""
  while True:
    ids = list(ezidapp.models.StoreIdentifier.objects.filter(owner=user)\
      .filter(identifier__gt=lastId).only("identifier")\
      .order_by("identifier")[:1000])
    if len(ids) == 0: break
    for id in ids:
      s = ezid.deleteIdentifier(id.identifier, ezidapp.models.getAdminUser(),
        args.updateExternalServices)
      if not s.startswith("success"): error("identifier deletion failed: " + s)
    lastId = ids[-1].identifier
  while hasIdentifiersInUpdateQueue():
    print "delete-user: waiting for update queue to drain..."
    sys.stdout.flush()
    time.sleep(5)
else:
  if ezidapp.models.StoreIdentifier.objects.filter(owner=user).count() > 0:
    error("user can't be deleted: has identifiers")
  if hasIdentifiersInUpdateQueue():
    error("user can't be deleted: has identifiers in the update queue")

searchUser = ezidapp.models.SearchUser.objects.get(username=user.username)
user.delete()
searchUser.delete()

s = ezid.deleteIdentifier(user.pid, ezidapp.models.getAdminUser())
if not s.startswith("success"):
  print "delete-user: agent PID deletion failed: " + s

print "delete-user: step 2 complete\n\nRemaining steps required:\n\n%s\n" %\
  "\n".join(STEPS[2:])
