#! /usr/bin/env python

# Compares an LDAP database with EZID's LDAP cache.  Specifically,
# compares attribute values of all ezidGroup and ezidUser entries
# found in the former with cached attribute values stored in agent
# identifiers in the latter.  Usage:
#
# diff-ezid-ldap ldap-server dumpfile
#
# LDAP authentication credentials are obtained from EZID's
# configuration environment, but the LDAP server to query must be
# specified as the first command line argument.  The second argument
# should be the pathname of an uncompressed EZID dump file (raw or
# normal) containing records for agent identifiers and ONLY agent
# identifiers.  Such a file can be created from a full dump using the
# command:
#
# select _fields contains _ezid_role
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set; if it isn't, we set it to "settings.production".
#
# Greg Janee <gjanee@ucop.edu>
# June 2015

import ldap
import os
import sys

if "DJANGO_SETTINGS_MODULE" not in os.environ:
  os.environ["DJANGO_SETTINGS_MODULE"] = "settings.production"

try:
  import settings
except ImportError:
  sys.path.append(os.path.split(os.path.split(
    os.path.abspath(__file__))[0])[0])
  import settings

# Bootstrapping: reference a(ny) Django setting to trigger the loading
# of said settings, which causes the PYTHONPATH to be modified,
# supporting subsequent imports.
import django.conf
django.conf.settings.PROJECT_ROOT

# Configure the logging so that errors don't get added to the server's
# log file.  Also, disable daemon threads.
django.conf.settings.LOGGING_CONFIG_FILE = "logging.offline.conf"
django.conf.settings.DAEMON_THREADS_ENABLED = False

import config
import util

if len(sys.argv) != 3:
  sys.stderr.write("usage: diff-ezid-ldap ldap-server dumpfile\n")
  sys.exit(1)

# Load EZID groups and users from LDAP.

s = ldap.initialize(sys.argv[1])
s.bind_s(config.config("ldap.ldap_admin_dn"),
  config.config("ldap.ldap_admin_password"), ldap.AUTH_SIMPLE)
entries = s.search_s(config.config("ldap.base_dn"), ldap.SCOPE_SUBTREE,
  "(|(objectClass=ezidGroup)(objectClass=ezidUser))")
s.unbind()

# Normalize LDAP attribute values for comparison purposes.

for e in entries:
  d = e[1]
  for k in d:
    d[k] = map(lambda v: v.decode("UTF-8"), d[k])
    if len(d[k]) == 1:
      d[k] = d[k][0]
    else:
      assert len(d[k]) > 1
      d[k].sort()
      d[k] = " ; ".join(d[k])

# Load cached LDAP attribute values from agent identifiers.

agents = {}
for l in open(sys.argv[2]):
  r = l[:-1].split(" ")
  id = r[0]
  if not id.startswith("ark:/"): id = "ark:/" + id
  d = {}
  for i in range(1, len(r), 2):
    k = util.decode(r[i])
    v = util.decode(r[i+1])
    if k.startswith("ldap."):
      if k == "ldap.objectClass":
        # Special case: ensure values are in sorted order for
        # comparison purposes.
        v = v.split(" ; ")
        v.sort()
        v = " ; ".join(v)
      d[k[5:]] = v
  agents[id] = d

# Compare.

seenIds = set()

for dn, ld in entries:
  id = ld.get("groupArkId", ld.get("arkId", None))
  assert id != None
  seenIds.add(id)
  if id not in agents:
    print "\n%s\n\tno corresponding agent identifier" % dn
    continue
  ad = agents[id]
  headerPrinted = [False]
  def printHeader ():
    if not headerPrinted[0]: print "\n%s | %s" % (dn, id)
    headerPrinted[0] = True
  for a in ld:
    if a == "userPassword": continue
    if a not in ad:
      printHeader()
      print "\t< %s" % util.encode2(a)
      continue
    if ld[a] != ad[a]:
      printHeader()
      print "\t! %s\n\t\t< %s\n\t\t> %s" % (util.encode2(a),
        util.encode2(ld[a]), util.encode2(ad[a]))
  for a in ad:
    if a not in ld:
      printHeader()
      print "\t> %s" % util.encode2(a)

for id in agents:
  if id not in seenIds:
    print "\n%s\n\tno corresponding LDAP entry" % id
