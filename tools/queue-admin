#! /usr/bin/env python

# Queue administration tool.  Currently works with the binder and
# DataCite queues only.  Run with the '-h' option for usage.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# January 2018

import argparse
import django.db.models
import django.db.transaction
import os.path
import sys
import time

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import ezidapp.models
import util

queue = None # set below; the queue model class object manager

def formatTimestamp (t):
  return time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime(t))

def permanentErrors ():
  return queue.filter(errorIsPermanent=True)

def transientErrors ():
  return queue.filter(~django.db.models.Q(error=""))\
    .filter(errorIsPermanent=False)

def printOverview (args):
  with django.db.transaction.atomic():
    l = queue.count()
    net = queue.aggregate(django.db.models.Min("enqueueTime"))\
      ["enqueueTime__min"]
    xet = queue.aggregate(django.db.models.Max("enqueueTime"))\
      ["enqueueTime__max"]
    pe = permanentErrors().count()
    te = transientErrors().count()
  print "entries: %d" % l
  print "earliest: %s" % ("-" if net == None else formatTimestamp(net))
  print "latest: %s" % ("-" if xet == None else formatTimestamp(xet))
  print "permanent errors: %d" % pe
  print "transient errors: %d" % te

def listErrors (rows):
  errors = {}
  for r in list(rows):
    l = errors.get(r.error, [])
    l.append(r)
    errors[r.error] = l
  for e, l in errors.items():
    print util.oneLine(e)
    for r in l:
      print "   %d %s %s %s" % (r.seq, formatTimestamp(r.enqueueTime),
        r.operation, r.identifier)

def listPermanentErrors (args):
  listErrors(permanentErrors().order_by("seq"))

def listTransientErrors (args):
  listErrors(transientErrors().order_by("seq"))

def clearPermanentErrorFlags (args):
  permanentErrors().update(errorIsPermanent=False)

def deleteEntries (args):
  for r in args.ranges:
    queue.filter(seq__range=r).delete()

def seqOrRangeType (arg):
  try:
    if "-" not in arg: arg = "%s-%s" % (arg, arg)
    l = tuple(int(v) for v in arg.split("-"))
    assert len(l) == 2 and l[0] <= l[1]
    return l
  except:
    raise argparse.ArgumentTypeError("invalid seq or range of seqs")

p = argparse.ArgumentParser(description="Queue administration.")
p.add_argument("queue", choices=["binder", "datacite"],
  help="the queue to administer")
sp = p.add_subparsers(help="commands")
sp.add_parser("overview", help="print overview")\
  .set_defaults(func=printOverview)
sp.add_parser("list-perrors", help="list permanent errors")\
  .set_defaults(func=listPermanentErrors)
sp.add_parser("list-terrors", help="list transient errors")\
  .set_defaults(func=listTransientErrors)
sp.add_parser("clear-perrors", help="clear permanent error flags")\
  .set_defaults(func=clearPermanentErrorFlags)
spp = sp.add_parser("delete", help="delete selected entries")
spp.set_defaults(func=deleteEntries)
spp.add_argument("ranges", nargs="*", help="seq or range of seqs",
  metavar="seq[-seq]", type=seqOrRangeType)

args = p.parse_args(sys.argv[1:])
if args.queue == "binder":
  queue = ezidapp.models.BinderQueue.objects
else:
  queue = ezidapp.models.DataciteQueue.objects
args.func(args)
