#! /usr/bin/env python

# Dumps DOIs belonging to one or more DataCite datacenters to standard
# output.
#
# Usage: dump-datacite datacenter...
#
# The output format is CSV with three columns: identifier (in
# qualified, normalized form), datacenter symbol (e.g., "CDL.CDL"),
# and Base64-encoded DataCite XML metadata.
#
# Note that DataCite currently returns public, exported DOIs only.
# Unavailable and unexported identifiers are marked as inactive in
# DataCite, and as a result are not returned (and reserved identifiers
# are not registered with DataCite at all).
#
# This script requires an EZID module.  The PYTHONPATH environment
# variable must include the .../SITE_ROOT/PROJECT_ROOT/impl directory;
# if it doesn't, we attempt to dynamically locate it and add it.
#
# Greg Janee <gjanee@ucop.edu>
# February 2018

import csv
import json
import os.path
import urllib
import urllib2
import sys

try:
  import util
except ImportError:
  sys.path.append(os.path.join(os.path.split(os.path.split(
    os.path.abspath(__file__))[0])[0], "impl"))
  import util

listTemplate = "https://api.datacite.org/dois?client-id=%s" +\
  "&page[size]=1000&page[cursor]=1"
doiTemplate = "https://api.datacite.org/dois/%s"

w = csv.writer(sys.stdout)

for datacenter in sys.argv[1:]:
  link = listTemplate % datacenter.lower()
  while link != None:
    j = json.loads(urllib2.urlopen(link).read())
    for r in j["data"]:
      doi = r["attributes"]["doi"]
      id = "doi:" + util.validateDoi(doi)
      jj = json.loads(urllib2.urlopen(doiTemplate % urllib.quote(doi)).read())
      w.writerow([id, datacenter, jj["data"]["attributes"]["xml"]])
    link = j["links"].get("next")
