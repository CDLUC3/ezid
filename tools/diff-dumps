#! /usr/bin/env python

# Compares two dump files.  The dump files must be comparable: they
# must both be raw dumps or both be normal dumps, must have the same
# scope, etc.  In both files the records must be ordered by
# identifier, as they are when produced by 'dump-store'.  (Dump files
# produced by 'dump-binder' must be sorted first.  Also, note that
# reserved identifiers are not stored in the binder.)  Usage:
#
#    diff-dumps dump1 dump2
#
# If a filename ends with ".gz", the dump is assumed to be
# gzip-compressed.
#
# This script requires an EZID module.  The PYTHONPATH environment
# variable must include the .../SITE_ROOT/PROJECT_ROOT/impl directory;
# if it doesn't, we attempt to dynamically locate it and add it.
#
# Greg Janee <gjanee@ucop.edu>
# April 2013

import gzip
import os.path
import sys
import time

try:
  import util
except ImportError:
  sys.path.append(os.path.join(os.path.split(os.path.split(
    os.path.abspath(__file__))[0])[0], "impl"))
  import util

def formatTimestamp (t):
  if t != None:
    return time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime(int(t)))
  else:
    return "none"

if len(sys.argv) != 3:
  sys.stderr.write("Usage: diff-dumps dump1 dump2\n")
  sys.exit(1)

if sys.argv[1].endswith(".gz"):
  fileA = gzip.GzipFile(filename=sys.argv[1], mode="r")
else:
  fileA = open(sys.argv[1])
if sys.argv[2].endswith(".gz"):
  fileB = gzip.GzipFile(filename=sys.argv[2], mode="r")
else:
  fileB = open(sys.argv[2])

def nextRecord (file):
  try:
    return util.fromExchange(file.next(), identifierEmbedded=True)
  except StopIteration:
    return None, None

idA, recordA = nextRecord(fileA)
idB, recordB = nextRecord(fileB)
while idA != None or idB != None:
  if idA != None and (idB == None or idA < idB):
    print "<", idA
    print "\t< _created: %s" %\
      formatTimestamp(recordA.get("_created", recordA.get("_c")))
    idA, recordA = nextRecord(fileA)
  elif idB != None and (idA == None or idB < idA):
    print ">", idB
    print "\t> _created: %s" %\
      formatTimestamp(recordB.get("_created", recordB.get("_c")))
    idB, recordB = nextRecord(fileB)
  else:
    if recordA != recordB:
      print "!", idA
      keysA = recordA.keys()
      keysA.sort()
      keysB = recordB.keys()
      keysB.sort()
      a = b = 0
      while a < len(keysA) or b < len(keysB):
        if a < len(keysA) and (b >= len(keysB) or keysA[a] < keysB[b]):
          print "\t< %s: %s" % (util.encode4(keysA[a]),
            util.encode3(recordA[keysA[a]]))
          a += 1
        elif b < len(keysB) and (a >= len(keysA) or keysB[b] < keysA[a]):
          print "\t> %s: %s" % (util.encode4(keysB[b]),
            util.encode3(recordB[keysB[b]]))
          b += 1
        else:
          if recordA[keysA[a]] != recordB[keysB[b]]:
            if keysA[a] in ["_created", "_c", "_updated", "_u"]:
              print "\t< %s: %s" % (keysA[a],
                formatTimestamp(recordA[keysA[a]]))
              print "\t> %s: %s" % (keysB[b],
                formatTimestamp(recordB[keysB[b]]))
            else:
              print "\t< %s: %s" % (util.encode4(keysA[a]),
                util.encode3(recordA[keysA[a]]))
              print "\t> %s: %s" % (util.encode4(keysB[b]),
                util.encode3(recordB[keysB[b]]))
          a += 1
          b += 1
    idA, recordA = nextRecord(fileA)
    idB, recordB = nextRecord(fileB)
