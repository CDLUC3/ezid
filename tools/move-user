#! /usr/bin/env python

# Moves a user to a different group (and possibly realm as well).
#
# This script modifies the database external to the running server and
# does not, for example, participate in the server's identifier
# locking mechanism.  While this script goes to some pains to ensure
# that the move can be performed safely and that there will be no
# conflicts with the server, it does not guarantee that, and hence
# should be run with caution.  Note that identifier updates are logged
# to standard error and not to the server's log.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# May 2018

import argparse
import os.path
import sys

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import ezid
import ezidapp.models

STEPS = [
  "1) Disable the user's login and remove its shoulders.",
  "2) Move the user (this script, step=2).",
  "3) Reload the server.",
  "4) Move the user's identifiers (this script, step=4).",
  "5) Save the user's record in the Django admin to update its agent PID.",
  "6) Re-enable the user's login, shoulders, etc., as desired."]

MOVE_REQUIREMENTS = """For a user to be moved, the user must:

   - Be disabled from logging in
   - Not be privileged
   - Not inherit its current group's shoulders
   - Have no shoulders
   - Not have any proxies or be a proxy for another user
   - Not be Crossref-enabled"""

def error (message):
  sys.stderr.write("move-user: %s\n" % message)
  sys.exit(1)

p = argparse.ArgumentParser(
  description=("Moving a user to a different group requires 6 steps:\n\n" +\
    "\n".join(STEPS)),
  formatter_class=argparse.RawDescriptionHelpFormatter)
p.add_argument("user", help="the user to move")
p.add_argument("new_group", help="the group to move to")
p.add_argument("step", type=int, choices=[2, 4], nargs="?",
  help="processing step")

args = p.parse_args(sys.argv[1:])

user = ezidapp.models.getUserByUsername(args.user)
if user == None or args.user == "anonymous":
  error("no such user: " + args.user)

newGroup = ezidapp.models.getGroupByGroupname(args.new_group)
if newGroup == None or args.new_group == "anonymous":
  error("no such group: " + args.new_group)

if user.loginEnabled or user.isPrivileged or user.inheritGroupShoulders or\
  user.shoulders.count() > 0 or user.proxies.count() > 0 or\
  user.proxy_for.count() > 0 or user.crossrefEnabled:
  error("user can't be moved\n\n%s\n" % MOVE_REQUIREMENTS)

if args.step == None:
  p.error("run with -h for usage")

if args.step == 2:
  if newGroup == user.group: error("user is already in group, nothing to do")
  for r in ezidapp.models.UpdateQueue.objects.all().order_by("seq"):
    if r.actualObject.owner == user:
      error("user can't be moved: has identifiers in the update queue")
  user.group = newGroup
  user.realm = newGroup.realm
  user.save()
  newSearchGroup = ezidapp.models.SearchGroup.objects.get(
    groupname=newGroup.groupname)
  searchUser = ezidapp.models.SearchUser.objects.get(username=user.username)
  searchUser.group = newSearchGroup
  searchUser.realm = newSearchGroup.realm
  searchUser.save()
  print "move-user: step 2 complete\n\nRemaining steps required:\n\n%s\n" %\
    "\n".join(STEPS[2:])

if args.step == 4:
  lastId = ""
  while True:
    ids = list(ezidapp.models.StoreIdentifier.objects.filter(owner=user)\
      .filter(identifier__gt=lastId).only("identifier")\
      .order_by("identifier")[:1000])
    if len(ids) == 0: break
    for id in ids:
      ezid.setMetadata(id.identifier, ezidapp.models.getAdminUser(),
        { "_ownergroup": newGroup.groupname },
        updateExternalServices=False)
    lastId = ids[-1].identifier
  print "move-user: step 4 complete\n\nRemaining steps required:\n\n%s\n" %\
    "\n".join(STEPS[4:])
