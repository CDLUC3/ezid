#! /usr/bin/env python

# Compares identifiers in the store and search databases.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set.
#
# Greg Janee <gjanee@ucop.edu>
# May 2016

import os.path
import sys
import time

# The following must precede any EZID module imports:
execfile(os.path.join(os.path.split(os.path.abspath(__file__))[0],
  "offline.py"))

import ezidapp.models
import util

if len(sys.argv) != 1:
  sys.stderr.write("Usage: diff-store-search\n")
  sys.exit(1)

def formatBoolean (b):
  return "yes" if b else "no"

def formatTimestamp (t):
  return time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime(t))

def harvest (model):
  lastId = ""
  while True:
    ids = model.objects.filter(
      identifier__gt=lastId).select_related("owner", "ownergroup",
      "datacenter", "profile").order_by("identifier")[:1000]
    if len(ids) == 0: break
    for id in ids:
      yield id
      lastId = id.identifier
  while True: yield None

storeIdentifiers = harvest(ezidapp.models.StoreIdentifier)
searchIdentifiers = harvest(ezidapp.models.SearchIdentifier)

stid = storeIdentifiers.next()
seid = searchIdentifiers.next()
while stid != None or seid != None:
  if stid != None and (seid == None or stid.identifier < seid.identifier):
    if stid.owner != None:
      print "<", stid.identifier
      print "\t< createTime: %s" % formatTimestamp(stid.createTime)
    stid = storeIdentifiers.next()
  elif seid != None and (stid == None or seid.identifier < stid.identifier):
    print ">", seid.identifier
    print "\t> createTime: %s" % formatTimestamp(seid.createTime)
    seid = searchIdentifiers.next()
  else:
    firstDifference = [True]
    def compare (label, a, b):
      if a != b:
        if firstDifference[0]:
          print "!", stid.identifier
          firstDifference[0] = False
        if a != "": print "\t< %s: %s" % (util.encode4(label), util.encode3(a))
        if b != "": print "\t> %s: %s" % (util.encode4(label), util.encode3(b))
    compare("owner", stid.owner.username, seid.owner.username)
    compare("ownergroup", stid.ownergroup.groupname, seid.ownergroup.groupname)
    compare("createTime", formatTimestamp(stid.createTime),
      formatTimestamp(seid.createTime))
    compare("updateTime", formatTimestamp(stid.updateTime),
      formatTimestamp(seid.updateTime))
    compare("status", stid.get_status_display(), seid.get_status_display())
    compare("unavailableReason", stid.unavailableReason,
      seid.unavailableReason)
    compare("exported", formatBoolean(stid.exported),
      formatBoolean(seid.exported))
    if stid.isDatacite:
      compare("datacenter", stid.datacenter.symbol, seid.datacenter.symbol)
    compare("crossrefStatus", stid.get_crossrefStatus_display(),
      seid.get_crossrefStatus_display())
    compare("crossrefMessage", stid.crossrefMessage, seid.crossrefMessage)
    compare("target", stid.target, seid.target)
    compare("profile", stid.profile.label, seid.profile.label)
    compare("agentRole", stid.get_agentRole_display(),
      seid.get_agentRole_display())
    stKeys = sorted(stid.cm.keys())
    seKeys = sorted(seid.cm.keys())
    sti = sei = 0
    while sti < len(stKeys) or sei < len(seKeys):
      if sti < len(stKeys) and\
        (sei >= len(seKeys) or stKeys[sti] < seKeys[sei]):
        compare("cm/" + stKeys[sti], stid.cm[stKeys[sti]], "")
        sti += 1
      elif sei < len(seKeys) and\
        (sti >= len(stKeys) or seKeys[sei] < stKeys[sti]):
        compare("cm/" + seKeys[sei], "", seid.cm[seKeys[sei]])
        sei += 1
      else:
        compare("cm/" + stKeys[sti], stid.cm[stKeys[sti]],
          seid.cm[seKeys[sei]])
        sti += 1
        sei += 1
    stid = storeIdentifiers.next()
    seid = searchIdentifiers.next()
