#! /usr/bin/env python

# Reads from standard input and writes to standard output, converting
# a raw dump to a normal dump.  Usage:
#
#    convert-dump [-nsz]
#
# The command line options are as for the 'dump' script.  If the -z
# option is specified, both the input and output are gzip-compressed.
#
# This script requires several EZID modules.  The PYTHONPATH
# environment variable must include the .../SITE_ROOT/PROJECT_ROOT
# directory; if it doesn't, we attempt to dynamically locate it and
# add it.  The DJANGO_SETTINGS_MODULE environment variable must be
# set; if it isn't, we set it to "settings.production".
#
# Additionally, if the -n option is NOT specified, this script assumes
# that LDAP is enabled, and a connection to the LDAP server is
# required.
#
# Greg Janee <gjanee@ucop.edu>
# April 2013

import gzip
import optparse
import os
import sys

if "DJANGO_SETTINGS_MODULE" not in os.environ:
  os.environ["DJANGO_SETTINGS_MODULE"] = "settings.production"

try:
  import settings
except ImportError:
  sys.path.append(os.path.split(os.path.split(
    os.path.abspath(__file__))[0])[0])
  import settings

# Bootstrapping: reference a(ny) Django setting to trigger the loading
# of said settings, which causes the PYTHONPATH to be modified,
# supporting subsequent imports.
import django.conf
django.conf.settings.PROJECT_ROOT

# Configure the logging so that errors don't get added to the server's
# log file.  Also, disable daemon threads.
django.conf.settings.LOGGING_CONFIG_FILE = "logging.offline.conf"
django.conf.settings.DAEMON_THREADS_ENABLED = False

import ezidadmin
import util

labelMapping = {
  "_o": "_owner",
  "_g": "_ownergroup",
  "_co": "_coowners",
  "_c": "_created",
  "_u": "_updated",
  "_t": "_target",
  "_s": "_shadows",
  "_p": "_profile",
  "_is": "_status",
  "_x": "_export"
}

p = optparse.OptionParser(usage="%prog [-nsz]")
p.add_option("-n", action="store_false",
  dest="convertAgents", default=True, help="do NOT convert agent identifiers")
p.add_option("-s", action="store_true",
  dest="includeShadowArks", default=False, help="include shadow ARKs")
p.add_option("-z", action="store_true",
  dest="gzip", default=False, help="gzip input/output")
options, args = p.parse_args()
if len(args) != 0: p.error("wrong number of arguments")

if options.convertAgents:
  agentMap = { "anonymous": "anonymous" }
  groups = ezidadmin.getGroups()
  if type(groups) is str:
    sys.stderr.write("convert-dump: error loading EZID groups: %s\n" % groups)
    sys.exit(1)
  for g in groups: agentMap[g["arkId"]] = g["gid"]
  users = ezidadmin.getUsers()
  if type(users) is str:
    sys.stderr.write("convert-dump: error loading EZID users: %s\n" % users)
    sys.exit(1)
  for u in users: agentMap[u["arkId"]] = u["uid"]

if options.gzip:
  infile = gzip.GzipFile(fileobj=sys.stdin, mode="r")
  outfile = gzip.GzipFile(fileobj=sys.stdout, mode="w")
else:
  infile = sys.stdin
  outfile = sys.stdout

def outputRecord1 (id, record):
  outfile.write(id)
  for k in record:
    outfile.write(" %s %s" % (util.encode4(labelMapping.get(k, k)),
      util.encode3(record[k])))
  outfile.write("\n")

def outputRecord (id, record):
  if record.get("_is", "public") != "public":
    record["_t"] = record["_t1"]
    del record["_t1"]
    if "_st1" in record:
      record["_st"] = record["_st1"]
      del record["_st1"]
  if "_s" in record:
    su = record["_su"]
    del record["_su"]
    st = record["_st"]
    del record["_st"]
    if options.includeShadowArks: outputRecord1("ark:/" + id, record)
    record["_u"] = su
    record["_t"] = st
    s = record["_s"]
    del record["_s"]
    record["_shadowedby"] = "ark:/" + id
    outputRecord1(s, record)
  else:
    outputRecord1("ark:/" + id, record)

for l in infile:
  lv = l[:-1].split(" ")
  id = lv[0]
  record = {}
  for i in range(1, len(lv), 2):
    record[util.decode(lv[i])] = util.decode(lv[i+1])
  if options.convertAgents:
    record["_o"] = agentMap[record["_o"]]
    record["_g"] = agentMap[record["_g"]]
    if "_co" in record:
      record["_co"] = " ; ".join(agentMap[co.strip()]\
        for co in record["_co"].split(";") if len(co.strip()) > 0)
  outputRecord(id, record)

outfile.close()
