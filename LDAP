LDAP Schema
===========

Here's the LDAP schema used by EZID.  For its core processing EZID
uses the following classes, which are auxiliary, not structural.  As a
consequence, for the most part (caveats below) EZID makes no
assumptions about the structural typing of or relationships between
LDAP entries.

object class ezidUser:
  Describes an EZID user.  Attributes:
  uid
    Username, e.g., "dryad".  Must not contain spaces.
  arkId
    The user's ARK identifier, e.g., "ark:/99166/p9bg2h891".  Must
    begin with "ark:/" and must be in canonical form.
  ezidOwnerGroup
    The DN of the user's owner group, e.g.,
    "ou=CDL,ou=ezid-groups,ou=uc3,dc=cdlib,dc=org".  An LDAP entry may
    be both an EZID user and an EZID group, and this attribute may be
    self-referential.
  ezidCoOwners
    List of uids of EZID users that may modify this user's
    identifiers.  The uids must be separated by spaces and/or commas,
    e.g., "manny,moe,jack".  Optional.

object class ezidGroup:
  Describes an EZID group.  Attributes:
  gid or uid
    The group name, e.g., "cdl".  Must not contain spaces.
  groupArkId or arkId
    The group's ARK identifier, e.g., "ark:/99166/p96q1sg5w".  Must
    begin with "ark:/" and must be in canonical form.  The user and
    group identifiers for a given user must be different.
  shoulderList
    List of labels of the identifier shoulders to which the group has
    access, or "NONE".  The labels must be separated by spaces and/or
    commas, e.g., "ezidark,eziddoi".
  agreementOnFile
    Optional boolean flag; not used by EZID itself.

Now for the caveats.  EZID assumes that user DNs can be formed by
inserting usernames into a common template (thus assuming that all
users share some structural parent).

Also, for password and user account (or "profile") management, EZID
assumes that users are of structural class inetOrgPerson, specifically
that users have passwords and have the standard LDAP attributes
givenName, sn, cn, mail, and telephoneNumber.

Appendix
--------

The formal LDIF declarations are as follows (note that the uid
attribute is predefined):

attributeTypes: (
  gid-oid
  NAME 'gid'
  SUP uid
  EQUALITY caseIgnoreMatch
  ORDERING caseIgnoreOrderingMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  arkId-oid
  NAME 'arkId'
  DESC 'ARK identifier, must begin with ark:/'
  EQUALITY caseExactMatch
  ORDERING caseExactOrderingMatch
  SUBSTR caseExactSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  groupArkId-oid
  NAME 'groupArkId'
  DESC 'ARK identifier, must begin with ark:/'
  SUP arkId
  EQUALITY caseExactMatch
  ORDERING caseExactOrderingMatch
  SUBSTR caseExactSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  ezidOwnerGroup-oid
  NAME 'ezidOwnerGroup'
  DESC 'EZID owner group'
  EQUALITY distinguishedNameMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.12
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  ezidCoOwners-oid
  NAME 'ezidCoOwners'
  DESC 'List of uids separated by spaces and/or commas'
  EQUALITY caseExactMatch
  ORDERING caseExactOrderingMatch
  SUBSTR caseExactSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  shoulderList-oid
  NAME 'shoulderList'
  DESC 'List of identifier shoulder labels separated by spaces and/or commas'
  EQUALITY caseExactMatch
  ORDERING caseExactOrderingMatch
  SUBSTR caseExactSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE
  USAGE userApplications )

attributeTypes: (
  agreementOnFile-oid
  NAME 'agreementOnFile'
  DESC 'Present and true if an agreement is on file'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
  SINGLE-VALUE
  USAGE userApplications )

objectClasses: (
  ezidUser-oid
  NAME 'ezidUser'
  DESC 'EZID user'
  SUP top
  AUXILIARY
  MUST ( objectClass $ arkId $ uid $ ezidOwnerGroup )
  MAY ezidCoOwners )

objectClasses: (
  ezidGroup-oid
  NAME 'ezidGroup'
  DESC 'EZID group'
  SUP top
  AUXILIARY
  MUST ( objectClass $ shoulderList )
  MAY ( groupArkId $ arkId $ uid $ gid $ agreementOnFile ) )
